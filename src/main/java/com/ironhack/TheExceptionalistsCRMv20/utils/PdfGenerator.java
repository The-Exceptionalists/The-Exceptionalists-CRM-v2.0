package com.ironhack.TheExceptionalistsCRMv20.utils;


import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import java.io.*;
import java.time.*;
import java.time.format.*;
import java.util.List;
import java.util.*;

public class PdfGenerator {


    private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.HELVETICA, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.HELVETICA, 14,
            Font.ITALIC);
    private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 12,
            Font.BOLD);
    private static Font small = new Font(Font.FontFamily.HELVETICA, 12,
            Font.NORMAL);
    private static Font smallItalics = new Font(Font.FontFamily.HELVETICA, 12,
            Font.ITALIC);
    private static HashMap<String, List<Object[]>> queries = new HashMap<>();
    private static HashMap<String, Double> stats;

    public static void init(HashMap<String, List<Object[]>> queries, HashMap<String, Double> stats) {
        PdfGenerator.queries = queries;
        PdfGenerator.stats = stats;

    }


    public static void generatePdf() throws DocumentException, FileNotFoundException {
        Document document = new Document(PageSize.A4, 50, 50, 50, 50);
        PdfWriter.getInstance(document, new FileOutputStream("src/main/resources/reports/report_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("d-MM-yyy_HH:mm:ss")) + ".pdf"));
        document.open();
        addMetaData(document);
        addContentPage(document);
        document.close();


    }



    private static void addMetaData(Document document) {
        document.addTitle("CRM Report");
        document.addSubject("Report of your database");
        document.addAuthor("The Exceptionalists CRM 2.0");
        document.addCreator("The Exceptionalists CRM 2.0");
    }

    private static void addContentPage(Document document)
            throws DocumentException {
        Paragraph contents = new Paragraph();
        // We add one empty line
        addEmptyLine(contents, 1);
        // Lets write a big header
        contents.add(new Paragraph("The Exceptionalists CRM Report", catFont));

        addEmptyLine(contents, 1);
        // Will create: Report generated by: _name, _date
        contents.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        contents.add(new Paragraph(
                "This file contains all reports and stats available at the exceptionalists CRM",
                smallItalics));

        addEmptyLine(contents, 1);

        for (Map.Entry<String, List<Object[]>> entries : queries.entrySet()) {
            if (!entries.getValue().isEmpty()) {
                contents.add(generateQueryReport(entries.getKey(), entries.getValue()));
                addEmptyLine(contents, 1);

            }
        }
        contents.add(new Paragraph(
                "Stats:",
                subFont));

        Paragraph statsParagraph = new Paragraph("");

        for (Map.Entry<String, Double> stats : stats.entrySet()) {

            Chunk chunk = new Chunk(stats.getKey() + ": ", smallBold);
            Chunk chunk1 = new Chunk(String.valueOf(stats.getValue()), small);
            statsParagraph.add(chunk);
            statsParagraph.add(chunk1);
            statsParagraph.add("\n");

        }
        contents.add(statsParagraph);
        addEmptyLine(contents, 1);
        document.add(contents);

        // Start a new page

    }

    private static Paragraph generateQueryReport(String title, List<Object[]> objects) throws DocumentException {


        if (!objects.isEmpty()) {

            Paragraph paragraph = new Paragraph(title, subFont);
            com.itextpdf.text.List list = new com.itextpdf.text.List(false, false, 10);
            for (Object[] object : objects) {
                Chunk chunk = new Chunk(String.valueOf( object[0]) + ": ", smallBold);
                Chunk chunk1 = new Chunk(String.valueOf(object[1]), small);
                Paragraph paragraph1 = new Paragraph("");
                paragraph1.add(chunk);
                paragraph1.add(chunk1);
                list.add(new ListItem(paragraph1));

            }
            paragraph.add(list);
            return paragraph;

        }


        return new Paragraph("");
    }


    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }


}
